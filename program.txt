        PROGRAM 1
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
    char *name;
    int date;
    char *description;
}week;

void create (week *day,int size){
    for (int i=0;i<size;i++){
        day[i].name = (char *)malloc(sizeof(char));
        day[i].description = (char *)malloc(sizeof(char));
    }
}

void read(week *day, int size){
    for (int i=0;i<size;i++){
        printf("Enter the name of the day");
        scanf("%s",day[i].name);
        printf("Enter the date");
        scanf("%d",&day[i].date);
        printf("Enter the description");
        scanf("%s",day[i].description);
    }
}

void display(week *day, int size){
    printf("The schedule are as follow");
    for (int i=0;i<size;i++){
        printf("Day:%s\t\tDate:%d\t\tDescription:%s",day[i].name,day[i].date,day[i].description);
    }
}

int main(){
    week *day=(week *)malloc(7 * sizeof(week));
    int size=7;
    create(day,size);
    read(day,size);
    display(day,size);
    for (int i = 0; i < size; i++)
    {
        free(day[i].name);
        free(day[i].description);
    }
    free(day);
    return 0;
}

        PROGRAM 2
#include <stdio.h>
#include <string.h>

void replacePattern(char *str,const char *pat, const char *rep){
    char temp[1024];
    char *pos = strstr(str, pat); // Find the pattern in the string
    if (!pos) {
        printf("Pattern not found.\n");
        return;
    }
    strncpy(temp,str,pos-str);
    temp[pos-str]='\0';
    strcat(temp,rep);
    strcat(temp, pos+strlen(pat));
    strcpy(str,temp);
}

int main(){
    char str[1024], pat[100], rep[100];
    printf("Enter the string you want to enter");
    fgets(str,sizeof(str),stdin);
    str[strcspn(str,"\n")]='\0';

    printf("Eneter the string pattern");
    fgets(pat,sizeof(pat),stdin);
    pat[strcspn(pat,"\n")]='\0';

    printf("Eneter the string you want to replace");
    fgets(rep,sizeof(rep),stdin);
    rep[strcspn(rep,"\n")]='\0';

    replacePattern(str,pat,rep);
    printf("The new string is %s",str);
    return 0;
}
        PROGRAM 3
#include <stdio.h>
#include <stdlib.h>
#define MAX 100

int top=-1;
int s[MAX];

void push(int i){
    if (top==MAX-1){
        printf("Stack overflow");
    }
    else {
        top++;
        s[top]=i;
    }
}

void pop(){
    if (top==-1){
        printf("Stack Underflow");
    }
    else{
        printf("Popped element %d", top);
        --top;
    }
}

void display(){
    printf ("Stack elements are\n");
    for (int i=0;i<=top;i++)
        printf("%d\n",s[i]);
}

void palindrome(){
    int flag=1;
    for(int i=0;i<top/2;i++){
        if(s[i]!=s[top-i]){
            flag=0;
            break;
        }
    }
    printf("\n%s", flag ? "It is a palindrome" : "It is not a palindrome");
}

int main(){
    int n,c;
    while(1){
        printf("1.Push\n2.Pop\n3.Display\n4.Palindrome\n5.Exit\n");
        scanf("%d",&c);
        switch(c){
            case 1:
                printf("Enter the number to push\n");
                scanf("%d",&n);
                push(n);
                break;
            case 2:
                pop();
                break;
            case 3:
                display();
                break;
            case 4:
                palindrome();
                break;
            case 5:
                exit(0);
            default:
                printf("Invalid choice\n");
        }
    }
    
}
        PROGRAM 4
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX 100

int precedence(char c){
    switch(c){
        case '+':
        case'-':
            return 1;
        case '*':
        case'%':
        case'/':
            return 2;
        case '^':
            return 3;
    }
    return -1;
}

void infixtopostfix(char *infix, char *postfix){
    int i,j,top=-1;
    char stack[MAX];
    for(i=0,j=0;infix[i];i++){
        if (isalnum(infix[i])){
            postfix[j++]=infix[i];
        }
        else if(infix[i]=='('){
            stack[++top]=infix[i];
        }
        else if(infix[i]==')'){
            while (top==-1 && infix[i]==')'){
                postfix[j++]=stack[top--];
            if(top!=-1)
                top--;
            }
        }
        else{
            while(top==-1&&precedence(infix[i])<=precedence(stack[top])){
                postfix[j++]=stack[top--];
            }
            stack[++top]=infix[i];
        }
    }
    while  (top!=-1){
        postfix[j++]=stack[top--];
    }
    postfix[j]='\0';
}


int main(){
    char postfix[MAX],infix[MAX];
    printf("Enter the postfix expression\n");
    gets(infix);

    infixtopostfix(infix,postfix);
    printf("The postfix expression is %s",postfix);

    return 0;
}
        PROGRAM 6
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#define MAX 10

char queue[MAX];
int front=-1,rear=-1;

bool isFULL(){
    return ((rear+1)%MAX)==front;
}

bool isEMPTY(){
    return front==-1;
}

void enqueue(int elem){
    if (isFULL()){
        printf("The queue is empty");
        return;
    }
    if (front==-1)front=0;
    rear=(rear+1)%MAX;
    queue[rear]=elem;
    printf("The element inserted %d",queue[rear]);
}
void dequeue(){
    if (isEMPTY()){
        printf("The queue is empty");
        return;
    }
    if (front==rear){
        front=rear=-1;
    }
    else{
        front=(front+1)%MAX;
    }
}
void display(){
    if (isEMPTY()){
        printf("The queue is empty");
        return;
    }
    for(int i=front;i!=rear;i=(i+1)%MAX){
        printf("%d-",queue[i]);
    }
    printf("%d",queue[rear]);
}

int main(){
    int ch;
    int elem;
    while(1){
        printf("1.Enqueue\n2.Dequeue\n3.Display\n4.Exit\n");
        printf("Enter your choice: ");
        scanf("%d",&ch);
        switch(ch){
            case 1:{
            printf("Enter the element to push into the queue");
            scanf("%d",&elem);
            enqueue(elem);
            break;
            }
            case 2:
            dequeue();
            break;
            case 3:
            display();
            break;
            case 4:
            exit(0);
            default:
            printf("Invalid choice");
        }
    }

 }